{"version":3,"sources":["images/cat-bar.jpeg","images/cat-bathtub.jpeg","images/cat-dashboard.jpeg","images/cat-lap.jpeg","images/cat-tongue.jpeg","images/cat-upsidedown.jpeg","images/code.svg","images/tileData.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","tileData","img","require","title","url","useStyles","makeStyles","theme","createStyles","root","display","flexWrap","justifyContent","overflow","backgroundColor","palette","background","paper","margin","gridList","color","hover","opacity","avatarSize","width","height","spacing","App","classes","className","GridList","GridListTile","key","cols","style","ListSubheader","component","src","alt","map","tile","tileContent","href","TileComponent","props","tilePopover","Popover","id","this","IconButton","aria-label","OverlayTrigger","placement","delay","show","hide","overlay","Avatar","variant","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.567bcf0c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat-bar.26961ae6.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/cat-bathtub.b079e743.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/cat-dashboard.5d72b192.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/cat-lap.9a3373a2.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/cat-tongue.185011ae.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/cat-upsidedown.7c4ea786.jpeg\";","module.exports = __webpack_public_path__ + \"static/media/code.bf3121ad.svg\";","const tileData = [\n  {\n    img: require('./cat-bar.jpeg'),\n    title: 'Cat Bar',\n    url: 'https://www.google.com',\n  },\n  {\n    img: require('./cat-bathtub.jpeg'),\n    title: 'Cat Bathtub',\n    url: 'https://www.mozilla.org/en-US/firefox/new',\n  },\n  {\n    img: require('./cat-dashboard.jpeg'),\n    title: 'Cat Dashboard',\n    url: 'https://support.apple.com/downloads/safari',\n  },\n  {\n    img: require('./cat-lap.jpeg'),\n    title: 'Cat Lap',\n    url: 'https://www.microsoft.com/en-us/edge',\n  },\n  {\n    img: require('./cat-tongue.jpeg'),\n    title: 'Cat Tongue',\n    url: 'https://support.microsoft.com/en-us/help/17621/internet-explorer-downloads',\n  },\n  {\n    img: require('./cat-upsidedown.jpeg'),\n    title: 'Cat Upsidedown',\n    url: 'https://www.opera.com/download',\n  }\n];\n\nexport default tileData;","import React, { Fragment } from 'react';\nimport OverlayTrigger from 'react-bootstrap/OverlayTrigger';\nimport Popover from 'react-bootstrap/Popover'\nimport './App.css';\nimport tileData from './images/tileData';\nimport Avatar from '@material-ui/core/Avatar';\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport IconButton from '@material-ui/core/IconButton';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport { Theme, createStyles, makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    root: {\n      display: 'flex',\n      flexWrap: 'wrap',\n      justifyContent: 'space-evenly',\n      overflow: 'hidden',\n      backgroundColor: theme.palette.background.paper,\n      margin: '25px',\n    },\n    gridList: {\n      justifyContent: 'space-evenly',\n    },\n    title: {\n      color: '#602cc9',\n    },\n    hover: {\n      '&:hover': {\n          opacity: .5,\n      },\n    },\n    avatarSize: {\n      width: '250px',\n      height: '250px',\n      margin: theme.spacing(.5),\n    },\n  }),\n);\n\nfunction App() {\n  const classes = useStyles();\n\n  return (\n    <div className=\"App\">\n      <div className={classes.root}>\n        <GridList className={classes.gridList} spacing={10}>\n          <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\n            <Fragment>\n              <ListSubheader component=\"div\">Site is a Work in Progress...</ListSubheader>\n              <img src={require('./images/code.svg')} alt=\"code\" width=\"30\" height=\"30\"/>\n            </Fragment>\n          </GridListTile>\n          {tileData.map((tile) => (\n            <TileComponent tileContent={tile} classes={classes}></TileComponent>\n          ))}\n        </GridList>\n      </div>\n      <ListSubheader component=\"div\">Attributions</ListSubheader>\n      <div>Code Icon made by <a href=\"https://www.flaticon.com/authors/freepik\" title=\"Freepik\">Freepik</a> from <a href=\"https://www.flaticon.com/\" title=\"Flaticon\">www.flaticon.com</a></div>\n    </div>\n  );\n}\n\nexport default App;\n\ninterface TileComponentProps {\n  tileContent: any;\n  classes: any;\n}\n\nclass TileComponent extends React.Component<any, TileComponentProps> {\n  private tileContent: any;\n  private classes: any;\n  private tilePopover = (tile: any) => {\n    return <Popover\n      id=\"popover-positioned-top\"\n      title=\"Popover top\"\n      className={this.classes.title}\n    >\n      <strong>{tile.title}</strong>\n    </Popover>\n  };\n\n  constructor(props: any) {\n    super(props);\n    this.tileContent = props.tileContent;\n    this.classes = props.classes;\n  }\n\n  render() {\n    return (\n      <GridListTile key={this.tileContent.img}>\n          <IconButton\n            aria-label={`info about ${this.tileContent.title}`}\n            className={this.classes.hover}\n            href={this.tileContent.url}\n          >\n            <OverlayTrigger\n              placement=\"bottom\"\n              delay={{ show: 150, hide: 200 }}\n              overlay={this.tilePopover(this.tileContent)}\n            >\n              <Avatar\n                alt={this.tileContent.title}\n                src={this.tileContent.img}\n                variant='circle'\n                className={this.classes.avatarSize}\n              />\n            </OverlayTrigger>\n          </IconButton>\n      </GridListTile>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}